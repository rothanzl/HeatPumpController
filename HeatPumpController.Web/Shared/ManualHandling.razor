@using HeatPumpController.Web.Services
@inject IViewModel ViewModel
@implements IDisposable

<h3>@AutomationState Mode</h3>
<p>@ProcessState</p>

<div class="row">
    <div class="col">
        <p>
            <button @onclick="ModeChangeButtonClick">@ModeChangeButtonText</button>
        </p>
    </div>
</div>

<RelayButton ParameterName="@nameof(ViewModel.HeatPumpRelay)"/>
<RelayButton ParameterName="@nameof(ViewModel.UpperValveRelay)"/>
<RelayButton ParameterName="@nameof(ViewModel.LowerValveRelay)"/>
<RelayButton ParameterName="@nameof(ViewModel.ExtraHeatingRelay)"/>

@code {

    protected override void OnInitialized()
    {
        ViewModel.DataChanged += DataChangedHandler;
        base.OnInitialized();
    }

    private string AutomationState => ViewModel.Automation ? "A" : "";
    private string ModeChangeButtonText => ViewModel.Automation ? "Manual" : "Automate";

    private string ProcessState => ViewModel.ProcessState.ToString();
    
    private void ModeChangeButtonClick()
    {
        ViewModel.Automation = !ViewModel.Automation;
    }

    private void DataChangedHandler() => InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        ViewModel.DataChanged -= DataChangedHandler;

    }

}